/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAccount__factory>;
    getContractFactory(
      name: "IAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccount__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "INonceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INonceManager__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AuthenticationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthenticationVerifier__factory>;
    getContractFactory(
      name: "BlocklistVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlocklistVerifier__factory>;
    getContractFactory(
      name: "CompliantVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompliantVerifier__factory>;
    getContractFactory(
      name: "TransactionVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionVerifier__factory>;
    getContractFactory(
      name: "AbstractShieldedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractShieldedPool__factory>;
    getContractFactory(
      name: "Blocklist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Blocklist__factory>;
    getContractFactory(
      name: "BurnerAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnerAccount__factory>;
    getContractFactory(
      name: "CompliantShieldedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompliantShieldedPool__factory>;
    getContractFactory(
      name: "MerkleTreeForBlocklist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeForBlocklist__factory>;
    getContractFactory(
      name: "IHasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasher__factory>;
    getContractFactory(
      name: "MerkleTreeWithHistory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeWithHistory__factory>;
    getContractFactory(
      name: "EventMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventMock__factory>;
    getContractFactory(
      name: "MockErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockErc20__factory>;
    getContractFactory(
      name: "MockSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSwapRouter__factory>;
    getContractFactory(
      name: "MultiAssetShieldedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiAssetShieldedPool__factory>;
    getContractFactory(
      name: "ShieldedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShieldedPool__factory>;
    getContractFactory(
      name: "ShieldedPoolWithBlocklist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShieldedPoolWithBlocklist__factory>;
    getContractFactory(
      name: "SwapExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapExecutor__factory>;
    getContractFactory(
      name: "AuthenticationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuthenticationVerifier__factory>;
    getContractFactory(
      name: "BlocklistVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlocklistVerifier__factory>;
    getContractFactory(
      name: "CompliantTransactionVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompliantTransactionVerifier__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;

    getContractAt(
      name: "BaseAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAccount>;
    getContractAt(
      name: "IAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccount>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "INonceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INonceManager>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AuthenticationVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthenticationVerifier>;
    getContractAt(
      name: "BlocklistVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlocklistVerifier>;
    getContractAt(
      name: "CompliantVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompliantVerifier>;
    getContractAt(
      name: "TransactionVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionVerifier>;
    getContractAt(
      name: "AbstractShieldedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractShieldedPool>;
    getContractAt(
      name: "Blocklist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Blocklist>;
    getContractAt(
      name: "BurnerAccount",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnerAccount>;
    getContractAt(
      name: "CompliantShieldedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompliantShieldedPool>;
    getContractAt(
      name: "MerkleTreeForBlocklist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeForBlocklist>;
    getContractAt(
      name: "IHasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasher>;
    getContractAt(
      name: "MerkleTreeWithHistory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeWithHistory>;
    getContractAt(
      name: "EventMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventMock>;
    getContractAt(
      name: "MockErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockErc20>;
    getContractAt(
      name: "MockSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSwapRouter>;
    getContractAt(
      name: "MultiAssetShieldedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiAssetShieldedPool>;
    getContractAt(
      name: "ShieldedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShieldedPool>;
    getContractAt(
      name: "ShieldedPoolWithBlocklist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShieldedPoolWithBlocklist>;
    getContractAt(
      name: "SwapExecutor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapExecutor>;
    getContractAt(
      name: "AuthenticationVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AuthenticationVerifier>;
    getContractAt(
      name: "BlocklistVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlocklistVerifier>;
    getContractAt(
      name: "CompliantTransactionVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompliantTransactionVerifier>;
    getContractAt(
      name: "Verifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
